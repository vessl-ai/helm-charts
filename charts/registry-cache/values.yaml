registryCache:
  caches:
    - remoteUrl: https://quay.io
      allowedPrefix: '/vessl-ai/*'
      serveUnder: quay
  
  quayMirrorUrl: http://10.96.0.64/v2/quay # NOTE: change this according to Service CIDR
  useGcrMirror: false

  containerdConfigPath: null # /etc/k0s/containerd.toml
  containerdRegistryBasePath: null # /etc/k0s/vessl_containerd_hosts

  restartContainerdInDaemonset: true
  untaint:
    enabled: false
    serviceAccount: registry-cache-untaint
    clusterRole: registry-cache-untaint
    clusterRoleBinding: registry-cache-untaint

harbor:
  enabled: false
  expose:
    type: clusterIP
    tls:
      enabled: false
    clusterIP:
      name: harbor
      staticClusterIP: 10.96.0.64 # NOTE: change this according to Service CIDR
      ports:
        httpPort: 80
      annotations: {}
      labels: {}

  externalURL: http://10.96.0.64 # NOTE: change this according to Service CIDR

  persistence:
    enabled: true
    resourcePolicy: delete
    persistentVolumeClaim:
      registry:
        existingClaim: ""
        storageClass: ""
        subPath: ""
        accessMode: ReadWriteOnce
        size: 5Gi
        annotations: {}
      jobservice:
        jobLog:
          existingClaim: ""
          storageClass: ""
          subPath: ""
          accessMode: ReadWriteOnce
          size: 1Gi
          annotations: {}
      database:
        existingClaim: ""
        storageClass: ""
        subPath: ""
        accessMode: ReadWriteOnce
        size: 1Gi
        annotations: {}
      redis:
        existingClaim: ""
        storageClass: ""
        subPath: ""
        accessMode: ReadWriteOnce
        size: 1Gi
        annotations: {}

    # Define which storage backend is used for registry to store
    # images and charts. Refer to
    # https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#storage
    # for the detail.
    imageChartStorage:
      type: filesystem

  # The initial password of Harbor admin. Change it from portal after launching Harbor
  # or give an existing secret for it
  # key in secret is given via existingSecretAdminPasswordKey (default to HARBOR_ADMIN_PASSWORD)
  # existingSecretAdminPassword:
  # existingSecretAdminPasswordKey: HARBOR_ADMIN_PASSWORD
  harborAdminPassword: "Harbor12345"

  ipFamily: {ipv6: {enabled: false}}

  # The update strategy for deployments with persistent volumes(jobservice, registry): "RollingUpdate" or "Recreate"
  # Set it as "Recreate" when "RWM" for volumes isn't supported
  updateStrategy:
    type: Recreate

  logLevel: info

  # The secret key used for encryption. Must be a string of 16 chars.
  secretKey: "not-a-secure-key"
  # If using existingSecretSecretKey, the key must be secretKey
  existingSecretSecretKey: ""

  metrics:
    enabled: false

  trace:
    enabled: false

  # If service exposed via "ingress", the Nginx will not be used
  nginx:
    image:
      repository: goharbor/nginx-photon
      tag: v2.11.0
    replicas: 1
    revisionHistoryLimit: 1
    resources:
      limits: {}
      requests: { cpu: 500m, memory: 512Mi }
    extraEnvVars: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    # Spread Pods across failure-domains like regions, availability zones or nodes
    topologySpreadConstraints: []
    # - maxSkew: 1
    #   topologyKey: topology.kubernetes.io/zone
    #   nodeTaintsPolicy: Honor
    #   whenUnsatisfiable: DoNotSchedule
    podAnnotations: {}
    podLabels: {}
    priorityClassName:

  portal:
    image:
      repository: goharbor/harbor-portal
      tag: v2.11.0
    replicas: 1
    revisionHistoryLimit: 1
    resources:
      limits: {}
      requests: { cpu: 100m, memory: 256Mi }
    extraEnvVars: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    # Spread Pods across failure-domains like regions, availability zones or nodes
    topologySpreadConstraints: []
    # - maxSkew: 1
    #   topologyKey: topology.kubernetes.io/zone
    #   nodeTaintsPolicy: Honor
    #   whenUnsatisfiable: DoNotSchedule
    podAnnotations: {}
    podLabels: {}
    serviceAnnotations: {}
    priorityClassName:

  core:
    image:
      repository: goharbor/harbor-core
      tag: v2.11.0
    replicas: 1
    revisionHistoryLimit: 1
    resources:
      limits: {}
      requests: { cpu: 500m, memory: 512Mi }
    extraEnvVars: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    # Spread Pods across failure-domains like regions, availability zones or nodes
    topologySpreadConstraints: []
    # - maxSkew: 1
    #   topologyKey: topology.kubernetes.io/zone
    #   nodeTaintsPolicy: Honor
    #   whenUnsatisfiable: DoNotSchedule
    podAnnotations: {}
    podLabels: {}
    serviceAnnotations: {}
    priorityClassName:
    ## User settings configuration json string
    configureUserSettings:
    # If not specifying a preexisting secret, a secret can be created from tokenKey and tokenCert and used instead.
    # If none of secretName, tokenKey, and tokenCert are specified, an ephemeral key and certificate will be autogenerated.
    # tokenKey and tokenCert must BOTH be set or BOTH unset.
    # The tokenKey value is formatted as a multiline string containing a PEM-encoded RSA key, indented one more than tokenKey on the following line.

  jobservice:
    image:
      repository: goharbor/harbor-jobservice
      tag: v2.11.0
    # set the service account to be used, default if left empty
    serviceAccountName: ""
    # mount the service account token
    automountServiceAccountToken: false
    replicas: 1
    revisionHistoryLimit: 1
    resources:
      limits: {}
      requests: { cpu: 100m, memory: 256Mi }
    extraEnvVars: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    # Spread Pods across failure-domains like regions, availability zones or nodes
    topologySpreadConstraints:
    # - maxSkew: 1
    #   topologyKey: topology.kubernetes.io/zone
    #   nodeTaintsPolicy: Honor
    #   whenUnsatisfiable: DoNotSchedule
    podAnnotations: {}
    podLabels: {}
    priorityClassName:
    maxJobWorkers: 10
    # The logger for jobs: "file", "database" or "stdout"
    jobLoggers:
      - file
      # - database
      # - stdout

  registry:
    registry:
      image:
        repository: goharbor/registry-photon
        tag: v2.11.0
      resources:
        limits: {}
        requests: { cpu: 100m, memory: 256Mi }
    controller:
      image:
        repository: goharbor/harbor-registryctl
        tag: v2.11.0
      resources:
        limits: {}
        requests: { cpu: 100m, memory: 256Mi }
      extraEnvVars: []
    replicas: 1
    revisionHistoryLimit: 1
    nodeSelector: {}
    tolerations: []
    affinity: {}
    # Spread Pods across failure-domains like regions, availability zones or nodes
    topologySpreadConstraints: []
    # - maxSkew: 1
    #   topologyKey: topology.kubernetes.io/zone
    #   nodeTaintsPolicy: Honor
    #   whenUnsatisfiable: DoNotSchedule
    podAnnotations: {}
    podLabels: {}
    priorityClassName:
    # If true, the registry returns relative URLs in Location headers. The client is responsible for resolving the correct URL.
    relativeurls: false
    credentials:
      username: "harbor_registry_user"
      password: "harbor_registry_password"

  trivy:
    enabled: false

  database:
    # if external database is used, set "type" to "external"
    # and fill the connection information in "external" section
    type: internal
    internal:
      image:
        repository: goharbor/harbor-db
        tag: v2.11.0
      resources:
        limits: {}
        requests: { cpu: 100m, memory: 256Mi }
      nodeSelector: {}
      tolerations: []
      affinity: {}
      priorityClassName:
      # The initial superuser password for internal database
      password: "changeit"
      # The size limit for Shared memory, pgSQL use it for shared_buffer
      # More details see:
      # https://github.com/goharbor/harbor/issues/15034
      shmSizeLimit: 512Mi
      initContainer:
        migrator: {}
        resources:
          limits: {}
          requests: {}
        permissions: {}
        resources:
          limits: {}
          requests: {}
    # The maximum number of connections in the idle connection pool per pod (core+exporter).
    # If it <=0, no idle connections are retained.
    maxIdleConns: 100
    # The maximum number of open connections to the database per pod (core+exporter).
    # If it <= 0, then there is no limit on the number of open connections.
    # Note: the default number of connections is 1024 for harbor's postgres.
    maxOpenConns: 900
    podAnnotations: {}
    podLabels: {}

  redis:
    type: internal
    internal:
      image:
        repository: goharbor/redis-photon
        tag: v2.11.0
      # set the service account to be used, default if left empty
      serviceAccountName: ""
      # mount the service account token
      automountServiceAccountToken: false
      resources:
        limits: {}
        requests: { cpu: 100m, memory: 256Mi }
      extraEnvVars: []
      nodeSelector: {}
      tolerations: []
      affinity: {}
      ## The priority class to run the pod as
      priorityClassName:

  exporter:
    image:
      repository: goharbor/harbor-exporter
      tag: v2.11.0
    serviceAccountName: ""
    # mount the service account token
    automountServiceAccountToken: false
    replicas: 1
    revisionHistoryLimit: 1
    resources:
      limits: {}
      requests: { cpu: 100m, memory: 256Mi }
    extraEnvVars: []
    podAnnotations: {}
    podLabels: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    # Spread Pods across failure-domains like regions, availability zones or nodes
    topologySpreadConstraints: []
    ## The priority class to run the pod as
    priorityClassName:
    # - maxSkew: 1
    #   topologyKey: topology.kubernetes.io/zone
    #   nodeTaintsPolicy: Honor
    #   whenUnsatisfiable: DoNotSchedule
